@namespace BlazorGooglePay

@using Microsoft.JSInterop
@using BlazorGooglePay.Extensions
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div @ref=_googlePayDiv></div>

@code {
    [Parameter]
    public GoogleButtonType Type { get; set; } = GoogleButtonType.Short;
    [Parameter]
    public GooglePayEnvironment? Environment { get; set; } = null;
    [Parameter]
    public GooglePayMerchantInfo MerchantInfo { get; set; } = null!;
    [Parameter]
    public string[] AuthMethods { get; set; } = { "PAN_ONLY", "CRYPTOGRAM_3DS"};
    [Parameter]
    public string[] CardNetworks { get; set; } = { "AMEX", "DISCOVER", "INTERAC", "JCB", "MASTERCARD", "VISA"};
    [Parameter]
    public GooglePayGatewayInfo GatewayInfo { get; set; } = null!;
    [Parameter]
    public string CurrencyCode { get; set; } = "USD";
    [Parameter]
    public Func<object, GooglePayButton, ValueTask<bool>> Clicked { get; set; } = null!;
    [Parameter]
    public Func<string, ValueTask>? ProcessPaymentCallback { get; set; } = null;
    [Parameter]
    public Func<GooglePayShippingAddress, ValueTask<GooglePayDisplayShippingOptions>>? GetDisplayShippingOptionsCallback { get; set; } = null;
    [Parameter]
    public Func<GooglePaySelectedShippingOption, ValueTask<GooglePayTransactionInfo>>? CalculateTransactionInfoCallback { get; set; } = null;

    ElementReference _googlePayDiv;
    GooglePayClient? client=null;
    protected override async Task OnInitializedAsync()
    {
        client = await JSRuntime.GetGooglePayClientAsync(
            Environment,
            MerchantInfo,
            ProcessPaymentCallback,
            GetDisplayShippingOptionsCallback,
            CalculateTransactionInfoCallback);
        var res = await client.IsReadyToPayAsync();
        if (res.Result)
        {
            var button = await client.CreateButtonAsync(Type);
            client.ButtonClicked += Clicked;
            await button.AttachToAsync(_googlePayDiv);
            await client.SetAllowedAuthMethodsAsync(AuthMethods);
            await client.SetAllowedCardNetworksAsync(CardNetworks);
            await client.SetGatewayInfoAsync(GatewayInfo);
            await client.SetMerchantInfoAsync(MerchantInfo);
            await client.PrefetchGooglePaymentDataAsync(CurrencyCode);
        }
    }
    public async ValueTask DisposeAsync()
    {
        try
        {
            if (client != null)
                await client.DisposeAsync();
        }
        catch { }
    }
}